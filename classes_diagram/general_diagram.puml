@startuml

skinparam classAttributeIconSize 0

class BaseModel


class Game {
    currentMonth : int
    maxMonths : int
    fund : Fund
    externalConj : ExternalConj
    player : Player
    simulateMonth() : void
}

class Player {
    playerName : str
    make_initial_investments(...) : void
    manage_portfolio(...) : void
}

class Fund {
    capital : float
    taxRate : float
    monthlyProfit : float
    portfolio : Portfolio
    calcMonthlyProfit(conj : ExternalConj) : float
    payTax() : float
    acceptNewInvestments(amount : float) : void
    handleRedemptions(amount : float) : void
}

class Portfolio {
    investments : List<Investment>
    addInvestment(inv : Investment) : void
    calcTotalValue(conj : ExternalConj) : float
    calcMonthlyProfit(conj : ExternalConj) : float
}


abstract class Investment {
    id : str
    amountInvested : float
    currency : str
    calcMonthlyProfit(conj : ExternalConj) : float
    getCurrentValue(conj : ExternalConj) : float
}

class Stock {
    companyName : str
    shares : int
    purchasePrice : float
}

class BankDeposit {
    bankName : str
    interestRate : float
    depositTermMonths : int
    currentTermPassed : int
}

class PreciousMetal {
    metalType : str
    quantity : float
    purchasePrice : float
}

class GovernmentBond {
    bondId : str
    faceValue : float
    interestRate : float
    purchasePrice : float
    maturityMonths : int
}

Investment <|-- Stock
Investment <|-- BankDeposit
Investment <|-- PreciousMetal
Investment <|-- GovernmentBond

Portfolio o-- Investment
Fund *-- Portfolio
Game --> Fund
Game --> ExternalConj
Game --> Player
Player --> Fund


class ExternalConj {
    data : ExternalConjData
    update_conj() : void
    getStockPrice(name : str) : float
    getMetalPrice(name : str) : float
    getDepositRate(name : str) : float
    getBondRate(name : str) : float
}

class ExternalConjData {
    currentMonth : int
    stockPrices : List[PriceItem]
    metalPrices : List[PriceItem]
    interestRates : List[PriceItem]
    bondRates : List[PriceItem]
    config : ExternalConjConfig
}

class PriceItem {
    item_id : str
    value : float
}

class ExternalConjConfig {
    stocks : AssetVolatility
    metals : AssetVolatility
    deposits : AssetVolatility
    bonds : AssetVolatility
}

class AssetVolatility {
    drift : float
    volatility : float
}

ExternalConj --> ExternalConjData
ExternalConjData --> ExternalConjConfig
ExternalConjData --> PriceItem
ExternalConjConfig --> AssetVolatility


class Market {
    data : MarketConfig
    get_available_assets(conj) : AvailableAssets
    create_external_conj() : ExternalConj
}

class MarketConfig {
    stocks : List[Stock]
    deposits : List[BankDeposit]
    metals : List[PreciousMetal]
    bonds : List[GovernmentBond]
}

class AvailableAssets {
    stocks : List[Stock]
    deposits : List[BankDeposit]
    metals : List[PreciousMetal]
    bonds : List[GovernmentBond]
}

Market --> MarketConfig
Market --> AvailableAssets

class PlayerPurchase {
    stocks : List[StockPurchase]
    deposits : List[DepositPurchase]
    metals : List[MetalPurchase]
    bonds : List[BondPurchase]
}



Player --> PlayerPurchase
Player --> Market
Market --> ExternalConj
Market --> AvailableAssets
BaseModel <|-- ExternalConjData
BaseModel <|-- PlayerPurchase
BaseModel <|-- PriceItem
BaseModel <|-- AssetVolatility
BaseModel <|-- ExternalConjConfig
BaseModel <|-- MarketConfig
BaseModel <|-- AvailableAssets

@enduml